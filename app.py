import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import plotly.express as px
import plotly.graph_objects as go
import sys
import os

# Add the parent directory to the path to import utils modules
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from utils.normalize import normalize_data, create_normalization_df, verify_normalization
from utils.knapsack import solve_knapsack, create_dp_table_df
from utils.combinations import generate_combinations, calculate_distances, create_combinations_df
from utils.sequential_concessions import (initialize_sequential_concessions, make_next_concession, 
                                        get_current_result, create_concessions_df, get_history_df)

def main():
    st.set_page_config(page_title="–í–∏–±—ñ—Ä –ø—Ä–æ—î–∫—Ç—ñ–≤ –∑–∞ –∫—ñ–ª—å–∫–æ–º–∞ –∫—Ä–∏—Ç–µ—Ä—ñ—è–º–∏", 
                       page_icon="üìä", 
                       layout="wide")
    
    st.title("–ú–µ—Ç–æ–¥–∏ –±–∞–≥–∞—Ç–æ–∫—Ä–∏—Ç–µ—Ä—ñ–∞–ª—å–Ω–æ—ó –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó –¥–ª—è –≤–∏–±–æ—Ä—É –ø—Ä–æ—î–∫—Ç—ñ–≤")
    st.markdown("""
    –¶–µ–π –¥–æ–¥–∞—Ç–æ–∫ –¥–æ–ø–æ–º–∞–≥–∞—î –æ—Å–æ–±–∞–º, —è–∫—ñ –ø—Ä–∏–π–º–∞—é—Ç—å —Ä—ñ—à–µ–Ω–Ω—è, –≤–∏–±—Ä–∞—Ç–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø—Ä–æ—î–∫—Ç—ñ–≤, 
    –≤—Ä–∞—Ö–æ–≤—É—é—á–∏ –∫—ñ–ª—å–∫–∞ –∫—Ä–∏—Ç–µ—Ä—ñ—ó–≤ —Ç–∞ –±—é–¥–∂–µ—Ç–Ω—ñ –æ–±–º–µ–∂–µ–Ω–Ω—è.
    """)
    
    with st.sidebar:
        st.header("–í—Ö—ñ–¥–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏")
        
        # Budget input
        budget = st.number_input("–î–æ—Å—Ç—É–ø–Ω–∏–π –±—é–¥–∂–µ—Ç", min_value=1, value=6)
        
        # Number of projects
        num_projects = st.number_input("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–æ—î–∫—Ç—ñ–≤", min_value=1, max_value=200, value=4)
        
        st.subheader("–û–ø—Ü—ñ—ó –∞–Ω–∞–ª—ñ–∑—É")
        
        # Options for Ideal Point method
        st.markdown("**–û–ø—Ü—ñ—ó –º–µ—Ç–æ–¥—É —ñ–¥–µ–∞–ª—å–Ω–æ—ó —Ç–æ—á–∫–∏:**")
        show_normalization = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç–∏ –¥–µ—Ç–∞–ª—ñ –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—ó", value=True)
        show_knapsack = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç–∏ —Ä—ñ—à–µ–Ω–Ω—è –∑–∞–¥–∞—á—ñ –ø—Ä–æ —Ä—é–∫–∑–∞–∫", value=True)
        show_combinations = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó", value=True)
        num_top_combinations = st.slider("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–∞–π–∫—Ä–∞—â–∏—Ö –∫–æ–º–±—ñ–Ω–∞—Ü—ñ–π –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è", 
                                        min_value=1, max_value=20, value=10)
        
        # Options for Sequential Concessions method
        st.markdown("**–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–∏—Ö –ø–æ—Å—Ç—É–ø–æ–∫:**")
        primary_criterion = st.radio(
            "–û—Å–Ω–æ–≤–Ω–∏–π –∫—Ä–∏—Ç–µ—Ä—ñ–π",
            ["–ü—Ä–∏–±—É—Ç–æ–∫", "–ï–∫—Å–ø–µ—Ä—Ç–Ω–∞ –æ—Ü—ñ–Ω–∫–∞"],
            index=0
        )
        primary_criterion_index = 1 if primary_criterion == "–ü—Ä–∏–±—É—Ç–æ–∫" else 2
        secondary_criterion_index = 2 if primary_criterion == "–ü—Ä–∏–±—É—Ç–æ–∫" else 1
    
    # Project data input
    st.header("–î–∞–Ω—ñ –ø—Ä–æ –ø—Ä–æ—î–∫—Ç–∏")
    
    # Allow selecting input method
    input_method = st.radio("–°–ø–æ—Å—ñ–± –≤–≤–µ–¥–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö", 
                            ["–†—É—á–Ω–µ –≤–≤–µ–¥–µ–Ω–Ω—è", "–ü—Ä–∏–∫–ª–∞–¥ –¥–∞–Ω–∏—Ö", "–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ CSV"],
                            horizontal=True)
    
    if input_method == "–†—É—á–Ω–µ –≤–≤–µ–¥–µ–Ω–Ω—è":
        col_headers = st.columns([1, 1, 1, 1])
        with col_headers[0]:
            st.markdown("**–ü—Ä–æ—î–∫—Ç**")
        with col_headers[1]:
            st.markdown("**–í–∞—Ä—Ç—ñ—Å—Ç—å**")
        with col_headers[2]:
            st.markdown("**–ü—Ä–∏–±—É—Ç–æ–∫**")
        with col_headers[3]:
            st.markdown("**–ï–∫—Å–ø–µ—Ä—Ç–Ω–∞ –æ—Ü—ñ–Ω–∫–∞**")
        
        # Initialize project data list
        projects = []
        
        # Create input fields for each project
        for i in range(num_projects):
            cols = st.columns([1, 1, 1, 1])
            with cols[0]:
                st.markdown(f"–ü—Ä–æ—î–∫—Ç {i+1}")
            with cols[1]:
                cost = st.number_input(f"–í–∞—Ä—Ç—ñ—Å—Ç—å {i+1}", 
                                       min_value=1, 
                                       value=20, 
                                       key=f"cost_{i}")
            with cols[2]:
                profit = st.number_input(f"–ü—Ä–∏–±—É—Ç–æ–∫ {i+1}", 
                                         min_value=0, 
                                         value=30, 
                                         key=f"profit_{i}")
            with cols[3]:
                expert = st.number_input(f"–ï–∫—Å–ø–µ—Ä—Ç–Ω–∞ –æ—Ü—ñ–Ω–∫–∞ {i+1}", 
                                         min_value=0, 
                                         value=40, 
                                         key=f"expert_{i}")
            
            # Add project data
            projects.append([cost, profit, expert])
        
        # Add option to download entered project data
        if projects:
            project_df = pd.DataFrame(projects, 
                                    columns=["Cost", "Profit", "ExpertScore"],
                                    index=[f"–ü—Ä–æ—î–∫—Ç {i+1}" for i in range(len(projects))])
            
            # Display the entered data as a table
            st.dataframe(project_df)
            
            # Download option for manual data
            csv = project_df.to_csv(index=True)
            st.download_button(
                label="–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ —è–∫ CSV",
                data=csv,
                file_name="project_data.csv",
                mime="text/csv",
            )
                
    elif input_method == "–ü—Ä–∏–∫–ª–∞–¥ –¥–∞–Ω–∏—Ö":
        # Provide sample project data
        sample_data = {
            "–ú–∞–ª–∏–π –ø—Ä–∏–∫–ª–∞–¥ (4 –ø—Ä–æ—î–∫—Ç–∏)": [
                [2, 20, 4],  # x1
                [1, 30, 3],  # x2
                [3, 40, 2],  # x3
                [2, 20, 5]   # x4
            ]
        }
        
        selected_sample = st.selectbox("–í–∏–±–µ—Ä—ñ—Ç—å –ø—Ä–∏–∫–ª–∞–¥ –¥–∞–Ω–∏—Ö", list(sample_data.keys()))
        projects = sample_data[selected_sample]
        
        # Display the sample data
        project_df = pd.DataFrame(projects, 
                                 columns=["Cost", "Profit", "ExpertScore"],
                                 index=[f"–ü—Ä–æ—î–∫—Ç {i+1}" for i in range(len(projects))])
        st.dataframe(project_df)
        
        # Download option for sample data
        csv = project_df.to_csv(index=True)
        st.download_button(
            label="–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–∏–∫–ª–∞–¥—É —è–∫ CSV",
            data=csv,
            file_name="sample_project_data.csv",
            mime="text/csv",
        )
        
    else:  # CSV Upload
        st.info("–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ CSV —Ñ–∞–π–ª —ñ–∑ —Å—Ç–æ–≤–ø—Ü—è–º–∏: Cost, Profit, ExpertScore")
        
        uploaded_file = st.file_uploader("–í–∏–±–µ—Ä—ñ—Ç—å CSV —Ñ–∞–π–ª", type="csv")
        if uploaded_file is not None:
            try:
                csv_data = pd.read_csv(uploaded_file)
                required_columns = ["Cost", "Profit", "ExpertScore"]
                
                # Check if required columns exist (case-insensitive)
                has_columns = all(any(col.lower() == req.lower() for col in csv_data.columns) 
                                 for req in required_columns)
                
                if has_columns:
                    # Get the actual column names (preserving case)
                    cost_col = next(col for col in csv_data.columns 
                                   if col.lower() == "cost".lower())
                    profit_col = next(col for col in csv_data.columns 
                                     if col.lower() == "profit".lower())
                    expert_col = next(col for col in csv_data.columns 
                                     if col.lower() == "expertscore".lower())
                    
                    projects = []
                    for _, row in csv_data.iterrows():
                        projects.append([row[cost_col], row[profit_col], row[expert_col]])
                    
                    st.dataframe(csv_data)
                else:
                    st.error("CSV –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ —Å—Ç–æ–≤–ø—Ü—ñ Cost, Profit —Ç–∞ ExpertScore")
                    projects = []
            except Exception as e:
                st.error(f"–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è CSV: {e}")
                projects = []
        else:
            projects = []
    
    # Only proceed if we have project data
    if not projects:
        st.warning("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥–∞–Ω—ñ –ø—Ä–æ –ø—Ä–æ—î–∫—Ç–∏, —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏.")
        return
    
    # Initialize session state for sequential concessions method
    if 'concessions_state' not in st.session_state:
        st.session_state.concessions_state = None
    if 'show_continue_button' not in st.session_state:
        st.session_state.show_continue_button = False
    if 'solution_accepted' not in st.session_state:
        st.session_state.solution_accepted = False
    
    # When analyze button is pressed, run both methods
    if st.button("–í–∏–∫–æ–Ω–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑ –æ–±–æ–º–∞ –º–µ—Ç–æ–¥–∞–º–∏") or 'ideal_point_run' in st.session_state:
        # Store that we've run the analysis
        st.session_state.ideal_point_run = True
        st.session_state.budget = budget
        
        # Reset sequential concessions state if button was just pressed
        if not 'ideal_point_run' in st.session_state or st.session_state.get('just_clicked', False):
            st.session_state.concessions_state = None
            st.session_state.show_continue_button = False
            st.session_state.solution_accepted = False
            st.session_state.just_clicked = False
        
        # Create two columns for side-by-side display
        col1, col2 = st.columns(2)
        
        # Run Ideal Point method in first column
        with col1:
            run_ideal_point_analysis(
                projects, budget, show_normalization, show_knapsack, 
                show_combinations, num_top_combinations
            )
        
        # Run Sequential Concessions method in second column
        with col2:
            # Initialize state if needed
            if st.session_state.concessions_state is None:
                st.session_state.concessions_state = initialize_sequential_concessions(
                    projects, budget, primary_criterion_index, secondary_criterion_index
                )
                st.session_state.show_continue_button = True
            
            # Show initial solution
            run_sequential_concessions_analysis(
                projects, budget, primary_criterion, 
                primary_criterion_index, secondary_criterion_index
            )
        if st.session_state.get('solution_accepted') and 'ideal_point_solution' in st.session_state:
            st.divider()
            primary_name = "–ü—Ä–∏–±—É—Ç–æ–∫" if primary_criterion == "–ü—Ä–∏–±—É—Ç–æ–∫" else "–ï–∫—Å–ø–µ—Ä—Ç–Ω–∞ –æ—Ü—ñ–Ω–∫–∞"
            secondary_name = "–ï–∫—Å–ø–µ—Ä—Ç–Ω–∞ –æ—Ü—ñ–Ω–∫–∞" if primary_criterion == "–ü—Ä–∏–±—É—Ç–æ–∫" else "–ü—Ä–∏–±—É—Ç–æ–∫"
            show_methods_comparison(primary_name, secondary_name)

def run_sequential_concessions_analysis(projects, budget, primary_criterion, 
                                       primary_criterion_index, secondary_criterion_index):
    """Run initial analysis with sequential concessions method"""
    
    st.header("–ú–µ—Ç–æ–¥ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–∏—Ö –ø–æ—Å—Ç—É–ø–æ–∫")
    
    # Initialize the state if needed
    if st.session_state.concessions_state is None:
        st.session_state.concessions_state = initialize_sequential_concessions(
            projects, budget, primary_criterion_index, secondary_criterion_index
        )
        st.session_state.show_continue_button = True
    
    # Display initial solution
    if not st.session_state.solution_accepted:
        display_sequential_concessions_results(
            st.session_state.concessions_state, 
            primary_criterion,
            1  # Initial concession amount
        )
    
    # Sequential concessions iteration controls (if already initialized)
    if (st.session_state.concessions_state is not None and 
        st.session_state.show_continue_button and 
        not st.session_state.solution_accepted):
        
        with st.form("concession_form"):
            st.markdown("### –ü—Ä–∏–π–Ω—è—Ç–∏ –ø–æ—Ç–æ—á–Ω–µ —Ä—ñ—à–µ–Ω–Ω—è –∞–±–æ –∑—Ä–æ–±–∏—Ç–∏ –ø–æ—Å—Ç—É–ø–∫—É?")
            
            make_concession = st.radio(
                "–î—ñ—è:",
                ["–ü—Ä–∏–π–Ω—è—Ç–∏ –ø–æ—Ç–æ—á–Ω–µ —Ä—ñ—à–µ–Ω–Ω—è", "–ó—Ä–æ–±–∏—Ç–∏ –ø–æ—Å—Ç—É–ø–∫—É —ñ —à—É–∫–∞—Ç–∏ –Ω–æ–≤–µ —Ä—ñ—à–µ–Ω–Ω—è"],
                index=1
            )
            
            if make_concession == "–ó—Ä–æ–±–∏—Ç–∏ –ø–æ—Å—Ç—É–ø–∫—É —ñ —à—É–∫–∞—Ç–∏ –Ω–æ–≤–µ —Ä—ñ—à–µ–Ω–Ω—è":
                new_concession = st.number_input(
                    f"–í–µ–ª–∏—á–∏–Ω–∞ –ø–æ—Å—Ç—É–ø–∫–∏ –¥–ª—è {primary_criterion}", 
                    min_value=1,
                    value=1
                )
            else:
                new_concession = 0
            
            submit_button = st.form_submit_button("–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏")
            
            if submit_button:
                if make_concession == "–ü—Ä–∏–π–Ω—è—Ç–∏ –ø–æ—Ç–æ—á–Ω–µ —Ä—ñ—à–µ–Ω–Ω—è":
                    st.success("–†—ñ—à–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ!")
                    st.session_state.show_continue_button = False
                    st.session_state.solution_accepted = True
                    st.rerun()
                    
                    # Display final solution after accepting
                    display_final_sequential_solution(
                        st.session_state.concessions_state,
                        primary_criterion
                    )
                else:
                    # Apply next concession
                    st.session_state.concessions_state = make_next_concession(
                        st.session_state.concessions_state, 
                        new_concession
                    )
                    
                    # Check if we still have acceptable combinations
                    latest_history = st.session_state.concessions_state["history"][-1]
                    if "acceptable_combinations" in latest_history and not latest_history["acceptable_combinations"]:
                        st.warning("–ù–µ–º–∞—î –ø—Ä–∏–π–Ω—è—Ç–Ω–∏—Ö –∫–æ–º–±—ñ–Ω–∞—Ü—ñ–π –∑ —Ç–∞–∫–æ—é –ø–æ—Å—Ç—É–ø–∫–æ—é. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î —Ä—ñ—à–µ–Ω–Ω—è.")
                        st.session_state.show_continue_button = False
                        st.session_state.solution_accepted = True
                        
                        # Display final solution when no more combinations are available
                        display_final_sequential_solution(
                            st.session_state.concessions_state,
                            primary_criterion
                        )
                    else:
                        # Display updated results
                        display_sequential_concessions_results(
                            st.session_state.concessions_state, 
                            primary_criterion,
                            new_concession
                        )
                        
    # If solution was already accepted, display the final solution
    elif st.session_state.solution_accepted and st.session_state.concessions_state:
        display_final_sequential_solution(
            st.session_state.concessions_state,
            primary_criterion
        )
    
    # Add download button for history CSV
    if st.session_state.solution_accepted and 'history_csv_data' in st.session_state:
        st.download_button(
            label="–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é —ñ—Ç–µ—Ä–∞—Ü—ñ–π —è–∫ CSV",
            data=st.session_state.history_csv_data,
            file_name="sequential_concessions_history.csv",
            mime="text/csv",
        )  

def show_methods_comparison(primary_name, secondary_name):
    """Display enhanced comparison between both methods with more data analysis"""
    
    st.markdown("""
    ### –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –º–µ—Ç–æ–¥—ñ–≤ –±–∞–≥–∞—Ç–æ–∫—Ä–∏—Ç–µ—Ä—ñ–∞–ª—å–Ω–æ—ó –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó

    **–ú–µ—Ç–æ–¥ —ñ–¥–µ–∞–ª—å–Ω–æ—ó —Ç–æ—á–∫–∏:**
    - **–ü—ñ–¥—Ö—ñ–¥**: –®—É–∫–∞—î —Ä—ñ—à–µ–Ω–Ω—è, –Ω–∞–π–±–ª–∏–∂—á–µ –¥–æ —ñ–¥–µ–∞–ª—å–Ω–æ—ó (–∞–ª–µ –∑–∞–∑–≤–∏—á–∞–π –Ω–µ–¥–æ—Å—è–∂–Ω–æ—ó) —Ç–æ—á–∫–∏
    - **–ü–µ—Ä–µ–≤–∞–≥–∏**: –î–∞—î –æ–¥—Ä–∞–∑—É –æ–ø—Ç–∏–º–∞–ª—å–Ω–µ —Ä—ñ—à–µ–Ω–Ω—è, –≤—Ä–∞—Ö–æ–≤—É—î –≤—Å—ñ –∫—Ä–∏—Ç–µ—Ä—ñ—ó –æ–¥–Ω–æ—á–∞—Å–Ω–æ
    - **–ù–µ–¥–æ–ª—ñ–∫–∏**: –ù–µ –ø–µ—Ä–µ–¥–±–∞—á–∞—î –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ –æ—Å–æ–±–æ—é, —â–æ –ø—Ä–∏–π–º–∞—î —Ä—ñ—à–µ–Ω–Ω—è
    
    **–ú–µ—Ç–æ–¥ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–∏—Ö –ø–æ—Å—Ç—É–ø–æ–∫:**
    - **–ü—ñ–¥—Ö—ñ–¥**: –ü–æ—Å–ª—ñ–¥–æ–≤–Ω–æ –æ–ø—Ç–∏–º—ñ–∑—É—î –∫—Ä–∏—Ç–µ—Ä—ñ—ó –∑–∞ —ó—Ö –≤–∞–∂–ª–∏–≤—ñ—Å—Ç—é, –¥–∞—é—á–∏ –ø–æ—Å—Ç—É–ø–∫–∏ –¥–ª—è –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É
    - **–ü–µ—Ä–µ–≤–∞–≥–∏**: –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π, –¥–æ–∑–≤–æ–ª—è—î –æ—Å–æ–±—ñ, —â–æ –ø—Ä–∏–π–º–∞—î —Ä—ñ—à–µ–Ω–Ω—è, –∞–∫—Ç–∏–≤–Ω–æ –≤–ø–ª–∏–Ω—É—Ç–∏ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    - **–ù–µ–¥–æ–ª—ñ–∫–∏**: –ú–æ–∂–µ –≤–∏–º–∞–≥–∞—Ç–∏ –∫—ñ–ª—å–∫–æ—Ö —ñ—Ç–µ—Ä–∞—Ü—ñ–π –¥–ª—è –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è –∑–∞–¥–æ–≤—ñ–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
    """)
    
    # Compare the solutions if both methods have final solutions
    if st.session_state.get('ideal_point_solution') and st.session_state.get('sequential_concessions_solution'):
        ideal = st.session_state.get('ideal_point_solution')
        seq = st.session_state.get('sequential_concessions_solution')
        
        # Create comparison table
        compare_df = pd.DataFrame({
            "–ú–µ—Ç—Ä–∏–∫–∞": ["–í–∏–±—Ä–∞–Ω—ñ –ø—Ä–æ—î–∫—Ç–∏", "–í–∞—Ä—Ç—ñ—Å—Ç—å", primary_name, secondary_name, "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±—é–¥–∂–µ—Ç—É (%)"],
            f"–ú–µ—Ç–æ–¥ —ñ–¥–µ–∞–ª—å–Ω–æ—ó —Ç–æ—á–∫–∏": [
                ideal.get('selected', "–ù–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ"),
                ideal.get('cost', "–ù–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ"),
                ideal.get('profit', "–ù–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ"),
                ideal.get('expert', "–ù–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ"),
                f"{ideal.get('cost', 0) / float(st.session_state.get('budget', 1)) * 100:.1f}%"
            ],
            f"–ú–µ—Ç–æ–¥ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–∏—Ö –ø–æ—Å—Ç—É–ø–æ–∫": [
                seq.get('selected', "–ù–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ"),
                seq.get('cost', "–ù–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ"),
                seq.get('profit', "–ù–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ"),
                seq.get('expert', "–ù–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ"),
                f"{seq.get('cost', 0) / float(st.session_state.get('budget', 1)) * 100:.1f}%"
            ],
            "–†—ñ–∑–Ω–∏—Ü—è": [
                "–†—ñ–∑–Ω–∞" if ideal.get('selected') != seq.get('selected') else "–û–¥–Ω–∞–∫–æ–≤–∞",
                ideal.get('cost', 0) - seq.get('cost', 0),
                ideal.get('profit', 0) - seq.get('profit', 0),
                ideal.get('expert', 0) - seq.get('expert', 0),
                f"{(ideal.get('cost', 0) - seq.get('cost', 0)) / float(st.session_state.get('budget', 1)) * 100:.1f}%"
            ]
        })
        
        st.dataframe(compare_df, use_container_width=True)
        
        # Analysis of results
        st.markdown("### –ê–Ω–∞–ª—ñ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤")
        
        # Check if solutions are the same
        if ideal.get('selected') == seq.get('selected'):
            st.success("–û–±–∏–¥–≤–∞ –º–µ—Ç–æ–¥–∏ –¥–∞–ª–∏ –æ–¥–Ω–∞–∫–æ–≤–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –¶–µ —Å–≤—ñ–¥—á–∏—Ç—å –ø—Ä–æ –≤–∏—Å–æ–∫—É –Ω–∞–¥—ñ–π–Ω—ñ—Å—Ç—å –≤–∏–±—Ä–∞–Ω–æ–≥–æ —Ä—ñ—à–µ–Ω–Ω—è.")
        else:
            st.info("–ú–µ—Ç–æ–¥–∏ –¥–∞–ª–∏ —Ä—ñ–∑–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏. –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É—î–º–æ —ó—Ö –¥–µ—Ç–∞–ª—å–Ω—ñ—à–µ.")
            
            # Calculate differences in percentages
            try:
                profit_diff_pct = abs(ideal.get('profit', 0) - seq.get('profit', 0)) / max(ideal.get('profit', 1), seq.get('profit', 1)) * 100
                expert_diff_pct = abs(ideal.get('expert', 0) - seq.get('expert', 0)) / max(ideal.get('expert', 1), seq.get('expert', 1)) * 100
                
                col1, col2 = st.columns(2)
                with col1:
                    st.metric(
                        label=f"–†—ñ–∑–Ω–∏—Ü—è —É {primary_name}", 
                        value=f"{abs(ideal.get('profit', 0) - seq.get('profit', 0))}", 
                        delta=f"{profit_diff_pct:.1f}%"
                    )
                
                with col2:
                    st.metric(
                        label=f"–†—ñ–∑–Ω–∏—Ü—è —É {secondary_name}", 
                        value=f"{abs(ideal.get('expert', 0) - seq.get('expert', 0))}", 
                        delta=f"{expert_diff_pct:.1f}%"
                    )
                
                # Deeper analysis
                if profit_diff_pct < 15 and expert_diff_pct < 15:
                    st.success("–†—ñ—à–µ–Ω–Ω—è –¥–æ—Å–∏—Ç—å –±–ª–∏–∑—å–∫—ñ –∑–∞ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏ –∫—Ä–∏—Ç–µ—Ä—ñ—ó–≤, –Ω–µ–∑–≤–∞–∂–∞—é—á–∏ –Ω–∞ —Ä—ñ–∑–Ω—ñ –≤–∏–±—Ä–∞–Ω—ñ –ø—Ä–æ—î–∫—Ç–∏.")
                elif profit_diff_pct > 30 or expert_diff_pct > 30:
                    st.warning("–ó–Ω–∞—á–Ω–∞ —Ä—ñ–∑–Ω–∏—Ü—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö. –¶–µ –º–æ–∂–µ —Å–≤—ñ–¥—á–∏—Ç–∏ –ø—Ä–æ —Å—É—Ç—Ç—î–≤—ñ –∫–æ–º–ø—Ä–æ–º—ñ—Å–∏ –º—ñ–∂ –∫—Ä–∏—Ç–µ—Ä—ñ—è–º–∏.")
                else:
                    st.info("–ü–æ–º—ñ—Ä–Ω–∞ —Ä—ñ–∑–Ω–∏—Ü—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö. –û–±–∏–¥–≤–∞ —Ä—ñ—à–µ–Ω–Ω—è –º–æ–∂—É—Ç—å –±—É—Ç–∏ –ø—Ä–∏–π–Ω—è—Ç–Ω–∏–º–∏ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—ñ–≤ –æ—Å–æ–±–∏, —è–∫–∞ –ø—Ä–∏–π–º–∞—î —Ä—ñ—à–µ–Ω–Ω—è.")
            except:
                st.warning("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—á–∏—Å–ª–∏—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è.")
        
        # Visual comparison
        st.markdown("### –í—ñ–∑—É–∞–ª—å–Ω–µ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è")
        
        # Create data for radar chart
        categories = [primary_name, secondary_name, "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±—é–¥–∂–µ—Ç—É"]
        
        # Normalize values for better visualization
        try:
            max_profit = max(ideal.get('profit', 0), seq.get('profit', 0))
            max_expert = max(ideal.get('expert', 0), seq.get('expert', 0))
            budget = float(st.session_state.get('budget', 1))
            
            ideal_values = [
                ideal.get('profit', 0) / max_profit if max_profit > 0 else 0,
                ideal.get('expert', 0) / max_expert if max_expert > 0 else 0,
                ideal.get('cost', 0) / budget
            ]
            
            seq_values = [
                seq.get('profit', 0) / max_profit if max_profit > 0 else 0,
                seq.get('expert', 0) / max_expert if max_expert > 0 else 0,
                seq.get('cost', 0) / budget
            ]
            
            # Create polar plot with Plotly
            fig = go.Figure()
            
            fig.add_trace(go.Scatterpolar(
                r=ideal_values,
                theta=categories,
                fill='toself',
                name='–ú–µ—Ç–æ–¥ —ñ–¥–µ–∞–ª—å–Ω–æ—ó —Ç–æ—á–∫–∏'
            ))
            
            fig.add_trace(go.Scatterpolar(
                r=seq_values,
                theta=categories,
                fill='toself',
                name='–ú–µ—Ç–æ–¥ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–∏—Ö –ø–æ—Å—Ç—É–ø–æ–∫'
            ))
            
            fig.update_layout(
                polar=dict(
                    radialaxis=dict(
                        visible=True,
                        range=[0, 1]
                    )
                ),
                showlegend=True,
                title="–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –º–µ—Ç–æ–¥—ñ–≤ –∑–∞ –Ω–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–º–∏ –∫—Ä–∏—Ç–µ—Ä—ñ—è–º–∏",
                height=500
            )
            
            st.plotly_chart(fig)
        except:
            st.warning("–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –≤—ñ–∑—É–∞–ª—å–Ω–µ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è.")
        
        # Recommendations
        st.markdown("### –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —â–æ–¥–æ –≤–∏–±–æ—Ä—É –º–µ—Ç–æ–¥—É")
        st.markdown("""
        - **–ú–µ—Ç–æ–¥ —ñ–¥–µ–∞–ª—å–Ω–æ—ó —Ç–æ—á–∫–∏** –≤–∞—Ä—Ç–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏, –∫–æ–ª–∏:
          - –í—Å—ñ –∫—Ä–∏—Ç–µ—Ä—ñ—ó –º–∞—é—Ç—å –ø—Ä–∏–±–ª–∏–∑–Ω–æ –æ–¥–Ω–∞–∫–æ–≤—É –≤–∞–∂–ª–∏–≤—ñ—Å—Ç—å
          - –ü–æ—Ç—Ä—ñ–±–Ω–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ —à–≤–∏–¥–∫–µ —Ä—ñ—à–µ–Ω–Ω—è –±–µ–∑ —ñ—Ç–µ—Ä–∞—Ü—ñ–π
          - –ù–µ–º–∞—î —á—ñ—Ç–∫–æ—ó —ñ—î—Ä–∞—Ä—Ö—ñ—ó –∫—Ä–∏—Ç–µ—Ä—ñ—ó–≤
        
        - **–ú–µ—Ç–æ–¥ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–∏—Ö –ø–æ—Å—Ç—É–ø–æ–∫** –∫—Ä–∞—â–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å, –∫–æ–ª–∏:
          - –Ñ —á—ñ—Ç–∫–∞ —ñ—î—Ä–∞—Ä—Ö—ñ—è –∫—Ä–∏—Ç–µ—Ä—ñ—ó–≤
          - –í–∞–∂–ª–∏–≤–æ –∫–æ–Ω—Ç—Ä–æ–ª—é–≤–∞—Ç–∏ –≤–µ–ª–∏—á–∏–Ω—É –∫–æ–º–ø—Ä–æ–º—ñ—Å—ñ–≤
          - –û—Å–æ–±–∞, —â–æ –ø—Ä–∏–π–º–∞—î —Ä—ñ—à–µ–Ω–Ω—è, —Ö–æ—á–µ –∞–∫—Ç–∏–≤–Ω–æ –±—Ä–∞—Ç–∏ —É—á–∞—Å—Ç—å —É –ø—Ä–æ—Ü–µ—Å—ñ
          - –ü–æ—Ç—Ä—ñ–±–Ω–∞ –≥–Ω—É—á–∫—ñ—Å—Ç—å —É –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ñ –±–∞–ª–∞–Ω—Å—É –º—ñ–∂ –∫—Ä–∏—Ç–µ—Ä—ñ—è–º–∏
        """)

def display_final_sequential_solution(state, primary_criterion):
    """Display the final solution after accepting in sequential concessions method"""
    
    st.header("–§—ñ–Ω–∞–ª—å–Ω–µ —Ä—ñ—à–µ–Ω–Ω—è –º–µ—Ç–æ–¥–æ–º –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–∏—Ö –ø–æ—Å—Ç—É–ø–æ–∫")
    
    # Determine names for criteria
    primary_name = primary_criterion
    secondary_name = "–ï–∫—Å–ø–µ—Ä—Ç–Ω–∞ –æ—Ü—ñ–Ω–∫–∞" if primary_criterion == "–ü—Ä–∏–±—É—Ç–æ–∫" else "–ü—Ä–∏–±—É—Ç–æ–∫"
    
    # Get current result
    current_results = get_current_result(state)
    
    # Show selected projects
    selected_projects = ", ".join([f"x{i+1}" for i, x in enumerate(current_results["final_solution"]) if x == 1]) or "–ñ–æ–¥–Ω–æ–≥–æ"
    
    # Store solution in session state for comparison
    st.session_state.sequential_concessions_solution = {
        'selected': selected_projects,
        'cost': current_results['final_cost'],
        'profit': current_results['final_primary_value'] if primary_criterion == "–ü—Ä–∏–±—É—Ç–æ–∫" else current_results['final_secondary_value'],
        'expert': current_results['final_secondary_value'] if primary_criterion == "–ü—Ä–∏–±—É—Ç–æ–∫" else current_results['final_primary_value']
    }
    
    st.markdown("### –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó")
    
    # Create a nice styled summary with columns
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**–î–µ—Ç–∞–ª—ñ —Ä—ñ—à–µ–Ω–Ω—è:**")
        st.markdown(f"**–í–∏–±—Ä–∞–Ω—ñ –ø—Ä–æ—î–∫—Ç–∏:** {selected_projects}")
        st.markdown(f"**–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å:** {current_results['final_cost']}")
    
    with col2:
        st.markdown("**–ó–Ω–∞—á–µ–Ω–Ω—è –∫—Ä–∏—Ç–µ—Ä—ñ—ó–≤:**")
        st.markdown(f"**{primary_name}:** {current_results['final_primary_value']}")
        st.markdown(f"**{secondary_name}:** {current_results['final_secondary_value']}")
        st.markdown(f"**–í–∫–∞–∑–∞–Ω–∞ –≤–µ–ª–∏—á–∏–Ω–∞ –ø–æ—Å—Ç—É–ø–∫–∏:** {current_results['concession_amount']}")
        st.markdown(f"**–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ—Å—Ç—É–ø–∫–∞ –¥–ª—è {primary_name}:** {current_results['total_concession']}")
    
    # Show history of iterations in an expander
    history_df = get_history_df(state)

    # Rename columns based on primary criterion
    column_mapping = {
        '–ö—Ä–∏—Ç–µ—Ä—ñ–π 1': primary_name,
        '–ö—Ä–∏—Ç–µ—Ä—ñ–π 2': secondary_name
    }
    history_df = history_df.rename(columns=column_mapping)

    with st.expander("–Ü—Å—Ç–æ—Ä—ñ—è —ñ—Ç–µ—Ä–∞—Ü—ñ–π", expanded=False):
        st.dataframe(history_df, use_container_width=True)

    # Store CSV data in session state for download button outside of form
    st.session_state.history_csv_data = history_df.to_csv(index=False)
    
    # Visualize the final solution
    st.markdown("### –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è —Ñ—ñ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä—ñ—à–µ–Ω–Ω—è")
    
    # Get all combinations from the last iteration
    latest_entry = None
    for entry in reversed(state["history"]):
        if "acceptable_combinations" in entry and entry["acceptable_combinations"]:
            latest_entry = entry
            break
    
    if latest_entry:
        final_solution = state["current_solution"]
        
        # Convert to plotting format
        plot_data = []
        for combo, cost, primary_value, secondary_value in latest_entry["acceptable_combinations"]:
            combo_str = ", ".join([f"x{j+1}" for j, x in enumerate(combo) if x == 1]) or "–ñ–æ–¥–Ω–æ–≥–æ"
            point_type = "–§—ñ–Ω–∞–ª—å–Ω–µ —Ä—ñ—à–µ–Ω–Ω—è" if np.array_equal(combo, final_solution) else "–Ü–Ω—à—ñ –º–æ–∂–ª–∏–≤—ñ —Ä—ñ—à–µ–Ω–Ω—è"
            
            plot_data.append({
                "–ö–æ–º–±—ñ–Ω–∞—Ü—ñ—è": combo_str,
                primary_name: primary_value,
                secondary_name: secondary_value,
                "–í–∞—Ä—Ç—ñ—Å—Ç—å": cost,
                "–¢–∏–ø": point_type
            })
        
        plot_df = pd.DataFrame(plot_data)
        
        # Create scatter plot with Plotly
        fig = px.scatter(
            plot_df, 
            x=primary_name, 
            y=secondary_name,
            color="–¢–∏–ø",
            symbol="–¢–∏–ø",
            hover_name="–ö–æ–º–±—ñ–Ω–∞—Ü—ñ—è",
            hover_data=["–í–∞—Ä—Ç—ñ—Å—Ç—å"],
            title=f"{primary_name} vs {secondary_name} –¥–ª—è —Ñ—ñ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä—ñ—à–µ–Ω–Ω—è",
            color_discrete_map={
                "–§—ñ–Ω–∞–ª—å–Ω–µ —Ä—ñ—à–µ–Ω–Ω—è": "#FF5733",
                "–Ü–Ω—à—ñ –º–æ–∂–ª–∏–≤—ñ —Ä—ñ—à–µ–Ω–Ω—è": "#BEBEBE"
            },
            symbol_map={
                "–§—ñ–Ω–∞–ª—å–Ω–µ —Ä—ñ—à–µ–Ω–Ω—è": "star",
                "–Ü–Ω—à—ñ –º–æ–∂–ª–∏–≤—ñ —Ä—ñ—à–µ–Ω–Ω—è": "circle"
            },
            size_max=15
        )
        
        # Customize layout
        fig.update_layout(
            xaxis_title=primary_name,
            yaxis_title=secondary_name,
            legend_title="–¢–∏–ø —Ä—ñ—à–µ–Ω–Ω—è",
            height=500,
            width=600,
            autosize=False
        )
        
        st.plotly_chart(fig)

def display_sequential_concessions_results(state, primary_criterion, concession_amount):
    """Display the results of the sequential concessions method"""
    
    # Determine names for criteria
    primary_name = primary_criterion
    secondary_name = "–ï–∫—Å–ø–µ—Ä—Ç–Ω–∞ –æ—Ü—ñ–Ω–∫–∞" if primary_criterion == "–ü—Ä–∏–±—É—Ç–æ–∫" else "–ü—Ä–∏–±—É—Ç–æ–∫"
    
    # Get current result
    current_results = get_current_result(state)
    
    # Show selected projects
    selected_projects = ", ".join([f"x{i+1}" for i, x in enumerate(current_results["final_solution"]) if x == 1]) or "–ñ–æ–¥–Ω–æ–≥–æ"
    
    st.markdown("### –ü–æ—Ç–æ—á–Ω–µ —Ä—ñ—à–µ–Ω–Ω—è")
    st.markdown(f"**–í–∏–±—Ä–∞–Ω—ñ –ø—Ä–æ—î–∫—Ç–∏:** {selected_projects}")
    st.markdown(f"**–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å:** {current_results['final_cost']}")
    st.markdown(f"**{primary_name}:** {current_results['final_primary_value']}")
    st.markdown(f"**{secondary_name}:** {current_results['final_secondary_value']}")
    st.markdown(f"**–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ—Å—Ç—É–ø–∫–∞ –¥–ª—è {primary_name}:** {current_results['total_concession']}")
    
    # Show history of iterations
    st.markdown("### –Ü—Å—Ç–æ—Ä—ñ—è —ñ—Ç–µ—Ä–∞—Ü—ñ–π")
    history_df = get_history_df(state)
    
    # Rename columns based on primary criterion
    column_mapping = {
        '–ö—Ä–∏—Ç–µ—Ä—ñ–π 1': primary_name,
        '–ö—Ä–∏—Ç–µ—Ä—ñ–π 2': secondary_name
    }
    history_df = history_df.rename(columns=column_mapping)
    
    st.dataframe(history_df, use_container_width=True)
    
    # Visualize latest iteration if available
    latest_entry = state["history"][-1]
    if "acceptable_combinations" in latest_entry and latest_entry["acceptable_combinations"]:
        st.markdown("### –ü—Ä–∏–π–Ω—è—Ç–Ω—ñ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó –Ω–∞ –ø–æ—Ç–æ—á–Ω—ñ–π —ñ—Ç–µ—Ä–∞—Ü—ñ—ó")
        
        final_solution = state["current_solution"]
        combinations_df = create_concessions_df(latest_entry["acceptable_combinations"], final_solution)
        
        # Rename columns based on primary criterion
        column_mapping = {
            '–ö—Ä–∏—Ç–µ—Ä—ñ–π 1': primary_name,
            '–ö—Ä–∏—Ç–µ—Ä—ñ–π 2': secondary_name
        }
        combinations_df = combinations_df.rename(columns=column_mapping)
        
        st.dataframe(combinations_df, use_container_width=True)
        
        # Create visualization
        st.markdown("### –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è")
        
        # Convert to plotting format
        plot_data = []
        for combo, cost, primary_value, secondary_value in latest_entry["acceptable_combinations"]:
            combo_str = ", ".join([f"x{j+1}" for j, x in enumerate(combo) if x == 1]) or "–ñ–æ–¥–Ω–æ–≥–æ"
            point_type = "–ü–æ—Ç–æ—á–Ω–µ —Ä—ñ—à–µ–Ω–Ω—è" if np.array_equal(combo, final_solution) else "–ú–æ–∂–ª–∏–≤–µ —Ä—ñ—à–µ–Ω–Ω—è"
            
            plot_data.append({
                "–ö–æ–º–±—ñ–Ω–∞—Ü—ñ—è": combo_str,
                primary_name: primary_value,
                secondary_name: secondary_value,
                "–í–∞—Ä—Ç—ñ—Å—Ç—å": cost,
                "–¢–∏–ø": point_type
            })
        
        plot_df = pd.DataFrame(plot_data)
        
        # Create scatter plot with Plotly
        fig = px.scatter(
            plot_df, 
            x=primary_name, 
            y=secondary_name,
            color="–¢–∏–ø",
            symbol="–¢–∏–ø",
            hover_name="–ö–æ–º–±—ñ–Ω–∞—Ü—ñ—è",
            hover_data=["–í–∞—Ä—Ç—ñ—Å—Ç—å"],
            title=f"{primary_name} vs {secondary_name} –¥–ª—è –ø—Ä–∏–π–Ω—è—Ç–Ω–∏—Ö –∫–æ–º–±—ñ–Ω–∞—Ü—ñ–π",
            color_discrete_map={
                "–ü–æ—Ç–æ—á–Ω–µ —Ä—ñ—à–µ–Ω–Ω—è": "#FF5733",
                "–ú–æ–∂–ª–∏–≤–µ —Ä—ñ—à–µ–Ω–Ω—è": "#BEBEBE"
            },
            symbol_map={
                "–ü–æ—Ç–æ—á–Ω–µ —Ä—ñ—à–µ–Ω–Ω—è": "star",
                "–ú–æ–∂–ª–∏–≤–µ —Ä—ñ—à–µ–Ω–Ω—è": "circle"
            },
            size_max=15
        )
        
        # Customize layout
        fig.update_layout(
            xaxis_title=primary_name,
            yaxis_title=secondary_name,
            legend_title="–¢–∏–ø —Ä—ñ—à–µ–Ω–Ω—è",
            height=500,
            width=600,
            autosize=False
        )
        
        st.plotly_chart(fig)
    
def run_ideal_point_analysis(projects, budget, show_normalization, show_knapsack, 
                            show_combinations, num_top_combinations):
    """Run the ideal point method analysis"""
    
    st.header("–ú–µ—Ç–æ–¥ —ñ–¥–µ–∞–ª—å–Ω–æ—ó —Ç–æ—á–∫–∏")
    
    # Step 1: Normalize data
    norm_profits, norm_expert, norm_data = normalize_data(projects)
    
    if show_normalization:
        with st.expander("–ö—Ä–æ–∫ 1: –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö", expanded=True):
            st.markdown("""
            –ù–∞ —Ü—å–æ–º—É –∫—Ä–æ—Ü—ñ –º–∏ –Ω–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∫—Ä–∏—Ç–µ—Ä—ñ—ó–≤, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –º–µ—Ç–æ–¥ –µ–≤–∫–ª—ñ–¥–æ–≤–æ—ó –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—ó. 
            –¶–µ –∑–∞–±–µ–∑–ø–µ—á—É—î –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—ñ—Å—Ç—å –æ–±–æ—Ö –∫—Ä–∏—Ç–µ—Ä—ñ—ó–≤ (–ø—Ä–∏–±—É—Ç–∫—É —Ç–∞ –µ–∫—Å–ø–µ—Ä—Ç–Ω–æ—ó –æ—Ü—ñ–Ω–∫–∏).
            
            –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —Ñ–æ—Ä–º—É–ª–∞: $\\bar{a}_{ij} = \\frac{r_{ij}}{\\sqrt{\\sum_{i=1}^{m} r_{ij}^2}}$
            """)
            
            # Show normalization table
            norm_df = create_normalization_df(projects, norm_data)
            st.dataframe(norm_df, use_container_width=True)
            
            # Verify normalization
            verify_result = verify_normalization(norm_profits, norm_expert)
            
            st.markdown("**–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞:**")
            cols = st.columns(2)
            with cols[0]:
                st.markdown(f"–°—É–º–∞ –∫–≤–∞–¥—Ä–∞—Ç—ñ–≤ –Ω–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–∏—Ö –ø—Ä–∏–±—É—Ç–∫—ñ–≤: {verify_result['profit_sum']}")
                st.markdown(f"–ú–∞—î –¥–æ—Ä—ñ–≤–Ω—é–≤–∞—Ç–∏ 1.0: {'‚úÖ' if verify_result['profit_valid'] else '‚ùå'}")
            with cols[1]:
                st.markdown(f"–°—É–º–∞ –∫–≤–∞–¥—Ä–∞—Ç—ñ–≤ –Ω–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–∏—Ö –µ–∫—Å–ø–µ—Ä—Ç–Ω–∏—Ö –æ—Ü—ñ–Ω–æ–∫: {verify_result['expert_sum']}")
                st.markdown(f"–ú–∞—î –¥–æ—Ä—ñ–≤–Ω—é–≤–∞—Ç–∏ 1.0: {'‚úÖ' if verify_result['expert_valid'] else '‚ùå'}")
    
    # Step 2: Solve knapsack problems to find ideal points
    with st.expander("–ö—Ä–æ–∫ 2: –ü–æ—à—É–∫ —ñ–¥–µ–∞–ª—å–Ω–∏—Ö —Ç–æ—á–æ–∫", expanded=True):
        st.markdown("""
        –î–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫—Ä–∏—Ç–µ—Ä—ñ—é –º–∏ –≤–∏—Ä—ñ—à—É—î–º–æ –∑–∞–¥–∞—á—É –ø—Ä–æ —Ä—é–∫–∑–∞–∫, —â–æ–± –∑–Ω–∞–π—Ç–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –º–æ–∂–ª–∏–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è 
        –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –±—é–¥–∂–µ—Ç–Ω–∏—Ö –æ–±–º–µ–∂–µ–Ω—å. –¶—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç—å —ñ–¥–µ–∞–ª—å–Ω—ñ (–∞–ª–µ –∑–∞–∑–≤–∏—á–∞–π –Ω–µ–¥–æ—Å—è–∂–Ω—ñ) —Ç–æ—á–∫–∏.
        """)
        
        # Solve for max profit
        profit_solution, max_profit, profit_dp, profit_path = solve_knapsack(
            projects, budget, 1)
        
        # Solve for max expert score
        expert_solution, max_expert, expert_dp, expert_path = solve_knapsack(
            projects, budget, 2)
        
        # Find normalized ideal points
        ideal_profit = sum([norm_profits[i] for i, x in enumerate(profit_solution) if x == 1])
        ideal_expert = sum([norm_expert[i] for i, x in enumerate(expert_solution) if x == 1])
        
        # Display ideal points
        cols = st.columns(2)
        with cols[0]:
            st.markdown("**–ú–∞–∫—Å–∏–º—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏–±—É—Ç–∫—É:**")
            selected = ", ".join([f"x{i+1}" for i, x in enumerate(profit_solution) if x == 1])
            st.markdown(f"–í–∏–±—Ä–∞–Ω—ñ –ø—Ä–æ—î–∫—Ç–∏: {selected}")
            st.markdown(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫: {max_profit}")
            st.markdown(f"–ù–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è: {ideal_profit:.4f}")
            
            if show_knapsack:
                st.markdown("#### –†—ñ—à–µ–Ω–Ω—è –∑–∞–¥–∞—á—ñ –ø—Ä–æ —Ä—é–∫–∑–∞–∫ –¥–ª—è –ø—Ä–∏–±—É—Ç–∫—É")
                st.markdown("**–¢–∞–±–ª–∏—Ü—è –¥–∏–Ω–∞–º—ñ—á–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è:**")
                dp_df = create_dp_table_df(profit_dp, budget, "–ü—Ä–∏–±—É—Ç–æ–∫")
                st.dataframe(dp_df, hide_index=True)
        
        with cols[1]:
            st.markdown("**–ú–∞–∫—Å–∏–º—ñ–∑–∞—Ü—ñ—è –µ–∫—Å–ø–µ—Ä—Ç–Ω–æ—ó –æ—Ü—ñ–Ω–∫–∏:**")
            selected = ", ".join([f"x{i+1}" for i, x in enumerate(expert_solution) if x == 1])
            st.markdown(f"–í–∏–±—Ä–∞–Ω—ñ –ø—Ä–æ—î–∫—Ç–∏: {selected}")
            st.markdown(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –µ–∫—Å–ø–µ—Ä—Ç–Ω–∞ –æ—Ü—ñ–Ω–∫–∞: {max_expert}")
            st.markdown(f"–ù–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è: {ideal_expert:.4f}")
            
            if show_knapsack:
                st.markdown("#### –†—ñ—à–µ–Ω–Ω—è –∑–∞–¥–∞—á—ñ –ø—Ä–æ —Ä—é–∫–∑–∞–∫ –¥–ª—è –µ–∫—Å–ø–µ—Ä—Ç–Ω–æ—ó –æ—Ü—ñ–Ω–∫–∏")
                st.markdown("**–¢–∞–±–ª–∏—Ü—è –¥–∏–Ω–∞–º—ñ—á–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è:**")
                dp_df = create_dp_table_df(expert_dp, budget, "–ï–∫—Å–ø–µ—Ä—Ç–Ω–∞ –æ—Ü—ñ–Ω–∫–∞")
                st.dataframe(dp_df, hide_index=True)
        
        st.markdown("**–Ü–¥–µ–∞–ª—å–Ω–∞ —Ç–æ—á–∫–∞:**")
        st.markdown(f"(–ü—Ä–∏–±—É—Ç–æ–∫, –ï–∫—Å–ø–µ—Ä—Ç–Ω–∞ –æ—Ü—ñ–Ω–∫–∞) = ({max_profit}, {max_expert})")
        st.markdown(f"(–ù–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫, –ù–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –µ–∫—Å–ø–µ—Ä—Ç–Ω–∞ –æ—Ü—ñ–Ω–∫–∞) = ({ideal_profit:.4f}, {ideal_expert:.4f})")
    
    # Step 3: Generate all feasible combinations
    with st.expander("–ö—Ä–æ–∫ 3: –ü–æ—à—É–∫ –Ω–∞–π–∫—Ä–∞—â–æ–≥–æ —Ä—ñ—à–µ–Ω–Ω—è", expanded=True):
        st.markdown("""
        –ú–∏ –≥–µ–Ω–µ—Ä—É—î–º–æ –≤—Å—ñ –º–æ–∂–ª–∏–≤—ñ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó –ø—Ä–æ—î–∫—Ç—ñ–≤, —è–∫—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å –±—é–¥–∂–µ—Ç–Ω–∏–º –æ–±–º–µ–∂–µ–Ω–Ω—è–º.
        –î–ª—è –∫–æ–∂–Ω–æ—ó –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó –æ–±—á–∏—Å–ª—é—î–º–æ –µ–≤–∫–ª—ñ–¥–æ–≤—É –≤—ñ–¥—Å—Ç–∞–Ω—å –¥–æ —ñ–¥–µ–∞–ª—å–Ω–æ—ó —Ç–æ—á–∫–∏.
        –ö–æ–º–±—ñ–Ω–∞—Ü—ñ—è –∑ –Ω–∞–π–º–µ–Ω—à–æ—é –≤—ñ–¥—Å—Ç–∞–Ω–Ω—é —î –Ω–∞—à–∏–º —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏–º —Ä—ñ—à–µ–Ω–Ω—è–º.
        """)
        st.markdown("""
        –§–æ—Ä–º—É–ª–∞, —è–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –≤–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è –≤—ñ–¥—Å—Ç–∞–Ω—ñ –¥–æ —ñ–¥–µ–∞–ª—å–Ω–æ—ó —Ç–æ—á–∫–∏: $D_i=\\sqrt{\\sum_{j=1}^{m}{(r_{ij}\\ -\\ r_j^+)}^2}$
        
        –î–µ:
        - $D_i$ - –≤—ñ–¥—Å—Ç–∞–Ω—å –≤—ñ–¥ —Ä—ñ—à–µ–Ω–Ω—è $i$ –¥–æ —ñ–¥–µ–∞–ª—å–Ω–æ—ó —Ç–æ—á–∫–∏
        - $r_{ij}$ - –Ω–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è —Ä—ñ—à–µ–Ω–Ω—è $i$ –∑–∞ –∫—Ä–∏—Ç–µ—Ä—ñ—î–º $j$
        - $r_j^+$ - —ñ–¥–µ–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –∫—Ä–∏—Ç–µ—Ä—ñ—é $j$
        """)
        
        combinations = generate_combinations(projects, budget)
        
        # Calculate distances to ideal point
        distances = calculate_distances(
            combinations, norm_profits, norm_expert, ideal_profit, ideal_expert)
        
        # Display best solution
        best_combo, best_cost, best_profit, best_expert, best_norm_profit, best_norm_expert, best_distance = distances[0]
        
        st.markdown("**–ù–∞–π–∫—Ä–∞—â–µ —Ä—ñ—à–µ–Ω–Ω—è:**")
        selected = ", ".join([f"x{i+1}" for i, x in enumerate(best_combo) if x == 1])
        if not selected:
            selected = "–ñ–æ–¥–Ω–æ–≥–æ"
            
        st.markdown(f"–í–∏–±—Ä–∞–Ω—ñ –ø—Ä–æ—î–∫—Ç–∏: {selected}")
        st.markdown(f"–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å: {best_cost}")
        st.markdown(f"–ó–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫: {best_profit}")
        st.markdown(f"–ó–∞–≥–∞–ª—å–Ω–∞ –µ–∫—Å–ø–µ—Ä—Ç–Ω–∞ –æ—Ü—ñ–Ω–∫–∞: {best_expert}")
        st.markdown(f"–í—ñ–¥—Å—Ç–∞–Ω—å –¥–æ —ñ–¥–µ–∞–ª—å–Ω–æ—ó —Ç–æ—á–∫–∏: {best_distance:.4f}")
        
        # Show visualization of solutions
        st.markdown("**–í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è —Ä—ñ—à–µ–Ω—å:**")
        
        # Create dataframe for plotting
        plot_data = []
        for combo, cost, profit, expert, norm_profit, norm_expert, distance in distances:
            combo_str = ", ".join([f"x{j+1}" for j, x in enumerate(combo) if x == 1]) or "–ñ–æ–¥–Ω–æ–≥–æ"
            is_best = (combo == best_combo)
            is_ideal_profit = (norm_profit == ideal_profit)
            is_ideal_expert = (norm_expert == ideal_expert)
            
            point_type = "–ó–≤–∏—á–∞–π–Ω–∞ —Ç–æ—á–∫–∞"
            if is_best:
                point_type = "–ù–∞–π–∫—Ä–∞—â–µ —Ä—ñ—à–µ–Ω–Ω—è"
            elif is_ideal_profit and is_ideal_expert:
                point_type = "–Ü–¥–µ–∞–ª—å–Ω–∞ —Ç–æ—á–∫–∞"
            elif is_ideal_profit:
                point_type = "–Ü–¥–µ–∞–ª—å–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫"
            elif is_ideal_expert:
                point_type = "–Ü–¥–µ–∞–ª—å–Ω–∞ –µ–∫—Å–ø–µ—Ä—Ç–Ω–∞ –æ—Ü—ñ–Ω–∫–∞"
            
            plot_data.append({
                "–ö–æ–º–±—ñ–Ω–∞—Ü—ñ—è": combo_str,
                "–ù–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫": norm_profit,
                "–ù–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –µ–∫—Å–ø–µ—Ä—Ç–Ω–∞ –æ—Ü—ñ–Ω–∫–∞": norm_expert,
                "–ü—Ä–∏–±—É—Ç–æ–∫": profit,
                "–ï–∫—Å–ø–µ—Ä—Ç–Ω–∞ –æ—Ü—ñ–Ω–∫–∞": expert,
                "–í—ñ–¥—Å—Ç–∞–Ω—å": distance,
                "–¢–∏–ø": point_type
            })
        
        plot_df = pd.DataFrame(plot_data)
        
        # Create scatter plot with Plotly
        fig = px.scatter(
            plot_df, 
            x="–ù–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫", 
            y="–ù–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –µ–∫—Å–ø–µ—Ä—Ç–Ω–∞ –æ—Ü—ñ–Ω–∫–∞",
            color="–¢–∏–ø",
            symbol="–¢–∏–ø",
            hover_name="–ö–æ–º–±—ñ–Ω–∞—Ü—ñ—è",
            hover_data=["–ü—Ä–∏–±—É—Ç–æ–∫", "–ï–∫—Å–ø–µ—Ä—Ç–Ω–∞ –æ—Ü—ñ–Ω–∫–∞", "–í—ñ–¥—Å—Ç–∞–Ω—å"],
            title="–†—ñ—à–µ–Ω–Ω—è –≤ –ø—Ä–æ—Å—Ç–æ—Ä—ñ –Ω–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–∏—Ö –∫—Ä–∏—Ç–µ—Ä—ñ—ó–≤",
            color_discrete_map={
                "–ù–∞–π–∫—Ä–∞—â–µ —Ä—ñ—à–µ–Ω–Ω—è": "#FF5733",
                "–Ü–¥–µ–∞–ª—å–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫": "#33A8FF",
                "–Ü–¥–µ–∞–ª—å–Ω–∞ –µ–∫—Å–ø–µ—Ä—Ç–Ω–∞ –æ—Ü—ñ–Ω–∫–∞": "#33FF57",
                "–Ü–¥–µ–∞–ª—å–Ω–∞ —Ç–æ—á–∫–∞": "#9E33FF",
                "–ó–≤–∏—á–∞–π–Ω–∞ —Ç–æ—á–∫–∞": "#BEBEBE"
            },
            symbol_map={
                "–ù–∞–π–∫—Ä–∞—â–µ —Ä—ñ—à–µ–Ω–Ω—è": "star",
                "–Ü–¥–µ–∞–ª—å–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫": "diamond",
                "–Ü–¥–µ–∞–ª—å–Ω–∞ –µ–∫—Å–ø–µ—Ä—Ç–Ω–∞ –æ—Ü—ñ–Ω–∫–∞": "diamond",
                "–Ü–¥–µ–∞–ª—å–Ω–∞ —Ç–æ—á–∫–∞": "circle",
                "–ó–≤–∏—á–∞–π–Ω–∞ —Ç–æ—á–∫–∞": "circle"
            },
            size_max=15
        )
        
        # Add ideal point (if not already in the solutions)
        fig.add_scatter(
            x=[ideal_profit], 
            y=[ideal_expert],
            mode="markers",
            marker=dict(color="purple", size=15, symbol="x"),
            name="–Ü–¥–µ–∞–ª—å–Ω–∞ —Ç–æ—á–∫–∞",
            hoverinfo="name"
        )
        
        # Customize layout to make the plot square
        fig.update_layout(
            xaxis_title="–ù–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫",
            yaxis_title="–ù–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –µ–∫—Å–ø–µ—Ä—Ç–Ω–∞ –æ—Ü—ñ–Ω–∫–∞",
            legend_title="–¢–∏–ø —Ä—ñ—à–µ–Ω–Ω—è",
            height=600,
            width=600,
            autosize=False,
            yaxis=dict(
                scaleanchor="x",
                scaleratio=1,
            )
        )
        
        st.plotly_chart(fig, use_container_width=False)
        
        # Show all combinations if requested
        if show_combinations:
            st.markdown(f"**–¢–æ–ø {min(num_top_combinations, len(distances))} —Ä—ñ—à–µ–Ω—å:**")
            combinations_df = create_combinations_df(distances[:num_top_combinations])
            st.dataframe(combinations_df, use_container_width=True)
            
            # Option to download full results
            csv = combinations_df.to_csv(index=False)
            st.download_button(
                label="–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —è–∫ CSV",
                data=csv,
                file_name="project_selection_results.csv",
                mime="text/csv",
            )
            
    st.session_state.ideal_point_solution = {
        'selected': selected,
        'cost': best_cost,
        'profit': best_profit,
        'expert': best_expert,
        'distance': best_distance
    }

if __name__ == "__main__":
    main()